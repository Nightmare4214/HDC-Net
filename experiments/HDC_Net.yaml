net: HDC_Net
net_params:
  in_dim: 4
  out_dim: 4
  num_filters: 32

criterion: GeneralizedDiceLoss
criterion_kwargs:
  to_onehot_y: true

#weight_type: square
eps: 1e-5
dataset: BraTSDataset
seed: 1024
batch_size: 5
num_epochs: 900
save_freq: 50     # save every 50 epochs
valid_freq: 10   # validate every 10 epochs
start_iter: 0

opt: Adam
opt_params:
  lr: 1e-3
  weight_decay: 1e-5
  amsgrad: true

workers: 5

train_list: train.txt
valid_list: val.txt
test_list: test.txt
train_transforms: # for training
  "Compose([
    LoadImaged(['flair', 't1', 't1ce', 't2', 'seg'], image_only=True, allow_missing_keys=True),
    
    CastToTyped(keys=['seg'], dtype=torch.long, allow_missing_keys=True),
    EnsureChannelFirstd(keys=['seg'], allow_missing_keys=True),
    
    StackImagesd(keys=['flair', 't1', 't1ce', 't2']),
    PercentileAndZScored(keys=['image'], lower_percentile=0.2, upper_percentile=99.8),
    
    RandSpatialCropd(keys=['image', 'seg'], roi_size=(128, 128, 128), random_size=False, allow_missing_keys=True),
    RandRotated(keys=['image', 'seg'], range_x=10, range_y=10, range_z=10, allow_missing_keys=True), 
    CastToTyped(keys=['seg'], dtype=torch.long, allow_missing_keys=True),
    RandScaleIntensityd(keys=['image'], factors=0.1),
    RandShiftIntensityd(keys=['image'], offsets=0.1),
    RandFlipd(keys=['image', 'seg'], prob=0.5, spatial_axis=0, allow_missing_keys=True),
    RandFlipd(keys=['image', 'seg'], prob=0.5, spatial_axis=1, allow_missing_keys=True),
    RandFlipd(keys=['image', 'seg'], prob=0.5, spatial_axis=2, allow_missing_keys=True),
    CastToTyped(keys=['seg'], dtype=torch.long, allow_missing_keys=True),
  ])"
test_transforms: # for testing
  "Compose([
    LoadImaged(['flair', 't1', 't1ce', 't2', 'seg'], image_only=True, allow_missing_keys=True),
    
    CastToTyped(keys=['seg'], dtype=torch.long, allow_missing_keys=True),
    EnsureChannelFirstd(keys=['seg'], allow_missing_keys=True),
    
    StackImagesd(keys=['flair', 't1', 't1ce', 't2']),
    PercentileAndZScored(keys=['image'], lower_percentile=0.2, upper_percentile=99.8),

    Padd(keys=['image'], padder=Pad([(0, 0), (0, 0), (0, 0), (0, 5)])),
    CastToTyped(keys=['seg'], dtype=torch.long, allow_missing_keys=True),
  ])"
